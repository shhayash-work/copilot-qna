import React, { useState, useRef, useEffect } from "react";
import { invoke } from "@forge/bridge";
import TextArea from "@atlaskit/textarea";
import Button   from "@atlaskit/button";
import Spinner  from "@atlaskit/spinner";

export default function App() {
  const [prompt, setPrompt] = useState("");
  const [msgs,   setMsgs]   = useState([]);
  const [loading, setLoading] = useState(false);
  const historyRef = useRef(null);

  /* 下端へ自動スクロール */
  useEffect(() => {
    if (historyRef.current) historyRef.current.scrollTop = historyRef.current.scrollHeight;
  }, [msgs]);

  /* 1 秒ポーリング */
  const poll = async (jobId, tries = 0) => {
    if (tries > 120) {
      setMsgs(m => [...m, { role:"assistant", text:"⚠️ タイムアウトしました" }]);
      setLoading(false);
      return;
    }
    const delay = 1000;
    try {
      const data = await invoke("get-result", { jobId });
      if (data.answer === null) {
        setTimeout(() => poll(jobId, tries + 1), delay);
      } else {
        setMsgs(m => m.map(msg =>
          msg.jobId === jobId ? { ...msg, text: data.answer, pending:false } : msg
        ));
        setLoading(false);
      }
    } catch {
      setTimeout(() => poll(jobId, tries + 1), delay);
    }
  };

  const send = async () => {
    if (!prompt.trim()) return;
    const userText = prompt;
    setPrompt("");
    setMsgs(m => [...m, { role:"user", text:userText }]);
    setLoading(true);

    const res = await invoke("main-resolver", { prompt:userText });
    if (res.status === "queued") {
      setMsgs(m => [...m, {
        role:"assistant", text:"生成中…", pending:true, jobId:res.jobId
      }]);
      poll(res.jobId);
    } else {
      setMsgs(m => [...m, { role:"assistant", text: res.message }]);
      setLoading(false);
    }
  };

  return (
    <div style={{ height:550, display:"flex", flexDirection:"column", padding:12, overflow:"hidden" }}>
      {/* 履歴 */}
      <div ref={historyRef} style={{ flex:1, overflowY:"auto", paddingRight:4 }}>
        {msgs.map((m,i) => (
          <div key={i} style={{ textAlign:m.role==="user"?"right":"left", marginTop:4 }}>
            <span style={{
              display:"inline-flex",              /* ← inline-flex で中に spinner */
              alignItems:"center",
              maxWidth:"80%",
              background:m.role==="user"?"#2E64FF":"#F4F5F7",
              color:m.role==="user"?"#fff":"#172B4D",
              borderRadius:m.role==="user"
                ? "20px 20px 4px 20px"
                : "20px 20px 20px 4px",
              padding:"10px 14px",
              whiteSpace:"pre-wrap",
              lineHeight:1.4,
              opacity:m.pending?0.6:1,
              textAlign:"left"                    /* ★ 内部テキストは常に左寄せ */
            }}>
              {m.text}
              {m.pending && <Spinner size="small" style={{ marginLeft:8 }} />}  {/* ★ 右端にスピナー */}
            </span>
          </div>
        ))}
      </div>

      {/* 入力バー */}
      <div style={{ marginTop:6 }}>
        <TextArea
          placeholder="質問を入力..."
          value={prompt}
          onChange={e=>setPrompt(e.target.value)}
          minimumRows={2}
          maxHeight={120}
          resize="vertical"
        />
        <Button appearance="primary" style={{ width:"100%", marginTop:4 }}
          onClick={send} isDisabled={loading}>送信</Button>
      </div>
    </div>
  );
}